const snmp = require('../');

var store = snmp.createModuleStore ();
// mibFile = '/var/tmp/mibs/IANAifType-MIB.mib';
// store.loadFromFile ('/var/tmp/mibs/IANAifType-MIB.mib');
// store.loadFromFile ('/var/tmp/mibs/IF-MIB.mib');
//mibFile = '/var/tmp/mibs/MERAKI-CLOUD-CONTROLLER-MIB.mib.orig';
var mibFile = '/var/tmp/mibs/net-snmp-examples-mib.mib';
store.loadFromFile (mibFile);
console.dir(Object.keys(store.parser.Modules));
// var providers = store.getProvidersForModule('NET-SNMP-EXAMPLES-MIB');
// const store = snmp.createModuleStore();

// store.loadFromFile ('/var/tmp/mibs/IANAifType-MIB.mib');
// store.loadFromFile ('/var/tmp/mibs/IF-MIB.mib');
// var jsonModule = store.getModule('SNMPv2-TC');

// console.log(jsonModule);
// var providers = store.getProvidersForModule('IF-MIB');
console.log("Test");

/*
user = {
    name: "wilma",
    level: snmp.SecurityLevel.authPriv,
    authProtocol: snmp.AuthProtocols.sha,
    authKey: "illhavesomeauth",
    privProtocol: snmp.PrivProtocols.aes,
    privKey: "andsomepriv"
};

session = snmp.createV3Session("localhost", user, { port:161, timeout: 4000 });

oids = ['1.3.6.1.2.1.1.1.0'];

session.get (oids, function (error, varbinds) {
	if (error) {
		console.error (error.toString ());
	} else {
		for (var i = 0; i < varbinds.length; i++) {
			if (snmp.isVarbindError (varbinds[i]))
				console.error (snmp.varbindError (varbinds[i]));
			else
				console.log (varbinds[i].oid + "|" + varbinds[i].value);
		}
	}
});
*/
